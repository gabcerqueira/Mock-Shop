{"ast":null,"code":"function r(r, t) {\n  var n = {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: r\n    }\n  },\n      e = \"photo\" === t ? \"https://api.pexels.com/v1/\" : \"https://api.pexels.com/videos/\";\n  return function (r, t) {\n    return fetch(e + \"/\" + r + \"?\" + function (r) {\n      return Object.keys(r).map(function (t) {\n        return t + \"=\" + r[t];\n      }).join(\"&\");\n    }(t || {}), n).then(function (r) {\n      return r.json();\n    });\n  };\n}\n\nfunction t(r) {\n  return !(!r || !r.photos);\n}\n\nprocess;\nvar n = {\n  __proto__: null,\n  isPhotos: t,\n  isVideos: function (r) {\n    return !(!r || !r.videos);\n  },\n  isError: function (r) {\n    return !!r.error;\n  }\n};\n\nfunction e(n) {\n  var e = r(n, \"photo\");\n  return {\n    search: function (r) {\n      return e(\"/search\", r);\n    },\n    curated: function (r) {\n      return void 0 === r && (r = {}), e(\"/curated\", r);\n    },\n    show: function (r) {\n      return e(\"/photos/\" + r.id);\n    },\n    random: function () {\n      try {\n        var r = Math.floor(1e3 * Math.random());\n        return Promise.resolve(this.curated({\n          page: r,\n          per_page: 1\n        })).then(function (r) {\n          return t(r) ? r.photos[0] : r;\n        });\n      } catch (r) {\n        return Promise.reject(r);\n      }\n    }\n  };\n}\n\nfunction o(t) {\n  var n = r(t, \"video\");\n  return {\n    search: function (r) {\n      return n(\"/search\", r);\n    },\n    popular: function (r) {\n      return void 0 === r && (r = {}), n(\"/popular\", r);\n    },\n    show: function (r) {\n      return n(\"/videos/\" + r.id);\n    }\n  };\n}\n\nfunction i(r) {\n  if (!r || \"string\" != typeof r) throw new TypeError(\"An ApiKey must be provided when initiating the Pexel's client.\");\n  return {\n    typeCheckers: n,\n    photos: e(r),\n    videos: o(r)\n  };\n}\n\nrequire(\"isomorphic-fetch\");\n\nexport { i as createClient };","map":{"version":3,"sources":["../src/createFetchWrapper.ts","../src/constants.ts","../src/typeCheckers.ts","../src/generatePhotoEndpoints.ts","../src/generateVideoEndpoints.ts","../src/createClient.ts"],"names":["createFetchWrapper","apiKey","type","options","method","headers","Accept","Content-Type","Authorization","baseUrl","path","params","fetch","stringifyParams","then","response","json","Object","keys","map","key","join","process","isPhotos","x","photos","videos","error","generatePhotoEndpoints","fetchWrapper","search","curated","show","id","random","randomPage","Math","floor","this","page","per_page","popular","require","createClient","TypeError","typeCheckers","generateVideoEndpoints"],"mappings":"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","sourcesContent":["import { Params } from \"./types\";\nimport { photoBaseUrl, videoBaseUrl } from \"./constants\";\n\nexport default function createFetchWrapper(\n  apiKey: string,\n  type: \"photo\" | \"video\"\n) {\n  const options = {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: apiKey,\n    },\n  };\n\n  const baseUrl = type === \"photo\" ? photoBaseUrl : videoBaseUrl;\n\n  return <T extends Params>(path: string, params?: T) =>\n    fetch(\n      `${baseUrl}/${path}?${stringifyParams(params || {})}`,\n      options\n    ).then((response) => response.json());\n}\n\nfunction stringifyParams<T extends Params>(params: T) {\n  return Object.keys(params)\n    .map((key) => `${key}=${params[key]}`)\n    .join(\"&\");\n}\n","export const photoBaseUrl = \"https://api.pexels.com/v1/\";\nexport const videoBaseUrl = \"https://api.pexels.com/videos/\";\nexport const testApiKey = process.env.API_KEY as string;\n","import { Photos, Videos, ErrorResponse } from \"./types\";\n\n/**\n * A helper function to determine if the object is a valid Photo response\n */\nexport function isPhotos(x: any): x is Photos {\n  return !!(x && x.photos);\n}\n\n/**\n * A helper function to determine if the object is a valid Video response\n */\nexport function isVideos(x: any): x is Videos {\n  return !!(x && x.videos);\n}\n\n/**\n * A helper function to determine if the object was an error response\n */\nexport function isError(x: any): x is ErrorResponse {\n  return !!x.error;\n}\n","import createFetchWrapper from \"./createFetchWrapper\";\nimport {\n  Photo,\n  PaginationParams,\n  ErrorResponse,\n  Photos,\n  PhotosWithTotalResults,\n} from \"./types\";\nimport { isPhotos } from \"./typeCheckers\";\n\ntype SearchReturn = PhotosWithTotalResults | ErrorResponse;\ntype CuratedReturn = Photos | ErrorResponse;\ntype ShowReturn = Photo | ErrorResponse;\ntype RandomReturn = Photo | ErrorResponse;\n\nexport default function generatePhotoEndpoints(apiKey: string) {\n  const fetchWrapper = createFetchWrapper(apiKey, \"photo\");\n\n  return {\n    search(\n      params: PaginationParams & { query: string }\n    ): Promise<SearchReturn> {\n      return fetchWrapper(`/search`, params);\n    },\n    curated(params: PaginationParams = {}): Promise<CuratedReturn> {\n      return fetchWrapper(`/curated`, params);\n    },\n    show({ id }: { id: string | number }): Promise<ShowReturn> {\n      return fetchWrapper(`/photos/${id}`);\n    },\n    async random(): Promise<RandomReturn> {\n      const randomPage = Math.floor(1000 * Math.random());\n      const response = await this.curated({ page: randomPage, per_page: 1 });\n\n      if (isPhotos(response)) {\n        return response.photos[0] as RandomReturn;\n      }\n\n      return response as ErrorResponse;\n    },\n  };\n}\n","import createFetchWrapper from \"./createFetchWrapper\";\nimport {\n  PaginationParams,\n  ErrorResponse,\n  Video,\n  Videos,\n  VideoFilterParams,\n} from \"./types\";\n\ntype SearchReturn = Videos | ErrorResponse;\ntype PopularReturn = Videos | ErrorResponse;\ntype ShowReturn = Video;\n\nexport default function generatePhotoEndpoints(apiKey: string) {\n  const fetchWrapper = createFetchWrapper(apiKey, \"video\");\n\n  return {\n    search(\n      params: PaginationParams &\n        VideoFilterParams & {\n          query: string;\n        }\n    ): Promise<SearchReturn> {\n      return fetchWrapper(`/search`, params);\n    },\n    popular(\n      params: PaginationParams & VideoFilterParams = {}\n    ): Promise<PopularReturn> {\n      return fetchWrapper(`/popular`, params);\n    },\n    show({ id }: { id: string | number }): Promise<ShowReturn> {\n      return fetchWrapper(`/videos/${id}`);\n    },\n  };\n}\n","require(\"isomorphic-fetch\");\n\nimport generatePhotoEndpoints from \"./generatePhotoEndpoints\";\nimport generateVideoEndpoints from \"./generateVideoEndpoints\";\nimport * as typeCheckers from \"./typeCheckers\";\n\nexport default function createClient(apiKey: string) {\n  if (!apiKey || typeof apiKey !== \"string\") {\n    throw new TypeError(\n      `An ApiKey must be provided when initiating the Pexel's client.`\n    );\n  }\n\n  return {\n    typeCheckers,\n    photos: generatePhotoEndpoints(apiKey),\n    videos: generateVideoEndpoints(apiKey),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}