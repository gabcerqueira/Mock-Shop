{"ast":null,"code":"import ShopActionTypes from \"../redux/shop/shopTypes\";\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchColletionsSuccess = collections => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collections\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    /*\r\n    //Observer Pattern\r\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n    \tasync (snapshot) => {\r\n    \t\tconst CollectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n    \t\tupdateCollections(CollectionsMap);\r\n    \t\t\r\n    \t}\r\n    );\r\n    */\n  };\n};","map":{"version":3,"sources":["C:/Users/gabri/Desktop/Mock-Shop/src/actions/shopActions.js"],"names":["ShopActionTypes","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","payload","fetchColletionsSuccess","collections","FETCH_COLLECTIONS_SUCCESS","fetchCollectionsStartAsync","dispatch"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC3CC,EAAAA,IAAI,EAAEF,eAAe,CAACG;AADqB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAIC,YAAD,KAAmB;AACzDH,EAAAA,IAAI,EAAEF,eAAe,CAACM,yBADmC;AAEzDC,EAAAA,OAAO,EAAEF;AAFgD,CAAnB,CAAhC;AAKP,OAAO,MAAMG,sBAAsB,GAAIC,WAAD,KAAkB;AACvDP,EAAAA,IAAI,EAAEF,eAAe,CAACU,yBADiC;AAEvDH,EAAAA,OAAO,EAAEE;AAF8C,CAAlB,CAA/B;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC/C,SAAQC,QAAD,IAAc;AACpB;;;;;;;;;;AAUA,GAXD;AAYA,CAbM","sourcesContent":["import ShopActionTypes from \"../redux/shop/shopTypes\";\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_START,\r\n});\r\n\r\nexport const fetchCollectionsFailure = (errorMessage) => ({\r\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n\tpayload: errorMessage,\r\n});\r\n\r\nexport const fetchColletionsSuccess = (collections) => ({\r\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n\tpayload: collections,\r\n});\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n\treturn (dispatch) => {\r\n\t\t/*\r\n\t\t//Observer Pattern\r\n\t\tthis.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n\t\t\tasync (snapshot) => {\r\n\t\t\t\tconst CollectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n\t\t\t\tupdateCollections(CollectionsMap);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t);\r\n\t\t*/\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}