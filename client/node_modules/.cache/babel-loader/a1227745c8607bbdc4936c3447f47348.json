{"ast":null,"code":"import { takeLatest, all, call, put } from \"redux-saga/effects\";\nimport ProductActionTypes from \"./productTypes\";\nimport { searchProductSuccess, searchProductFailure } from \"../../actions/productActions\";\nimport { fetchCollectionsSuccess } from \"../../actions/shopActions\";\nimport { getResultItemsFromSearch } from \"../../firebase/firebase\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase\";\nexport function* searchProductsAsync({\n  payload: {\n    search\n  }\n}) {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    console.log(collectionsMap.hats); //yield put(searchProductSuccess(resultItems));\n  } catch (error) {//yield put(searchProductFailure(error.message));\n  }\n}\nexport function* onSearchProductsStart() {\n  yield takeLatest(ProductActionTypes.SEARCH_PRODUCTS_START, searchProductsAsync);\n}\nexport function* getSingleProductStart() {\n  yield takeLatest(ProductActionTypes.GET_SINGLE_PRODUCT_START //getSingleProductAsync\n  );\n}\nexport function* productSagas() {\n  yield all([call(onSearchProductsStart)]);\n}","map":{"version":3,"sources":["C:/Users/gabri/Desktop/Mock-Shop/src/redux/product/productSagas.js"],"names":["takeLatest","all","call","put","ProductActionTypes","searchProductSuccess","searchProductFailure","fetchCollectionsSuccess","getResultItemsFromSearch","firestore","convertCollectionsSnapshotToMap","searchProductsAsync","payload","search","collectionRef","collection","snapshot","get","collectionsMap","console","log","hats","error","onSearchProductsStart","SEARCH_PRODUCTS_START","getSingleProductStart","GET_SINGLE_PRODUCT_START","productSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,kBAAP,MAA+B,gBAA/B;AAEA,SACCC,oBADD,EAECC,oBAFD,QAGO,8BAHP;AAKA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,wBAAT,QAAyC,yBAAzC;AACA,SACCC,SADD,EAECC,+BAFD,QAGO,yBAHP;AAKA,OAAO,UAAUC,mBAAV,CAA8B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAA9B,EAAuD;AAC7D,MAAI;AACH,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMhB,IAAI,CAChCQ,+BADgC,EAEhCM,QAFgC,CAAjC;AAIAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,cAAc,CAACG,IAA3B,EAPG,CASH;AACA,GAVD,CAUE,OAAOC,KAAP,EAAc,CACf;AACA;AACD;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACxC,QAAMvB,UAAU,CACfI,kBAAkB,CAACoB,qBADJ,EAEfb,mBAFe,CAAhB;AAIA;AAED,OAAO,UAAUc,qBAAV,GAAkC;AACxC,QAAMzB,UAAU,CACfI,kBAAkB,CAACsB,wBADJ,CAEf;AAFe,GAAhB;AAIA;AAED,OAAO,UAAUC,YAAV,GAAyB;AAC/B,QAAM1B,GAAG,CAAC,CAACC,IAAI,CAACqB,qBAAD,CAAL,CAAD,CAAT;AACA","sourcesContent":["import { takeLatest, all, call, put } from \"redux-saga/effects\";\r\nimport ProductActionTypes from \"./productTypes\";\r\n\r\nimport {\r\n\tsearchProductSuccess,\r\n\tsearchProductFailure,\r\n} from \"../../actions/productActions\";\r\n\r\nimport { fetchCollectionsSuccess } from \"../../actions/shopActions\";\r\nimport { getResultItemsFromSearch } from \"../../firebase/firebase\";\r\nimport {\r\n\tfirestore,\r\n\tconvertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase\";\r\n\r\nexport function* searchProductsAsync({ payload: { search } }) {\r\n\ttry {\r\n\t\tconst collectionRef = firestore.collection(\"collections\");\r\n\t\tconst snapshot = yield collectionRef.get();\r\n\t\tconst collectionsMap = yield call(\r\n\t\t\tconvertCollectionsSnapshotToMap,\r\n\t\t\tsnapshot\r\n\t\t);\r\n\t\tconsole.log(collectionsMap.hats);\r\n\r\n\t\t//yield put(searchProductSuccess(resultItems));\r\n\t} catch (error) {\r\n\t\t//yield put(searchProductFailure(error.message));\r\n\t}\r\n}\r\n\r\nexport function* onSearchProductsStart() {\r\n\tyield takeLatest(\r\n\t\tProductActionTypes.SEARCH_PRODUCTS_START,\r\n\t\tsearchProductsAsync\r\n\t);\r\n}\r\n\r\nexport function* getSingleProductStart() {\r\n\tyield takeLatest(\r\n\t\tProductActionTypes.GET_SINGLE_PRODUCT_START\r\n\t\t//getSingleProductAsync\r\n\t);\r\n}\r\n\r\nexport function* productSagas() {\r\n\tyield all([call(onSearchProductsStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}