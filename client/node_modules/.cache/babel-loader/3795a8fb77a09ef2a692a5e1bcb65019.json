{"ast":null,"code":"import ShopActionTypes from \"../redux/shop/shopTypes\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../firebase/firebase\";\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchColletionsSuccess = collections => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collections\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchColletionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n    /*\r\n    //Observer Pattern\r\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n    \tasync (snapshot) => {\r\n    \t\tconst CollectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n    \t\tupdateCollections(CollectionsMap);\r\n    \t\t\r\n    \t}\r\n    );\r\n    */\n  };\n};","map":{"version":3,"sources":["C:/Users/gabri/Desktop/Mock-Shop/src/actions/shopActions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","payload","fetchColletionsSuccess","collections","FETCH_COLLECTIONS_SUCCESS","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","collectionsMap","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B;AACA,SACCC,SADD,EAECC,+BAFD,QAGO,sBAHP;AAKA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC3CC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADqB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAIC,YAAD,KAAmB;AACzDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADmC;AAEzDC,EAAAA,OAAO,EAAEF;AAFgD,CAAnB,CAAhC;AAKP,OAAO,MAAMG,sBAAsB,GAAIC,WAAD,KAAkB;AACvDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADiC;AAEvDH,EAAAA,OAAO,EAAEE;AAF8C,CAAlB,CAA/B;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC/C,SAAQC,QAAD,IAAc;AACpB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AACAY,IAAAA,aAAa,CACXE,GADF,GAEEC,IAFF,CAEQC,QAAD,IAAc;AACnB,YAAMC,cAAc,GAAGlB,+BAA+B,CAACiB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACJ,sBAAsB,CAACU,cAAD,CAAvB,CAAR;AACA,KALF,EAMEC,KANF,CAMSC,KAAD,IAAWR,QAAQ,CAACR,uBAAuB,CAACgB,KAAK,CAACC,OAAP,CAAxB,CAN3B;AAQA;;;;;;;;;;AAUA,GArBD;AAsBA,CAvBM","sourcesContent":["import ShopActionTypes from \"../redux/shop/shopTypes\";\r\nimport {\r\n\tfirestore,\r\n\tconvertCollectionsSnapshotToMap,\r\n} from \"../firebase/firebase\";\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_START,\r\n});\r\n\r\nexport const fetchCollectionsFailure = (errorMessage) => ({\r\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n\tpayload: errorMessage,\r\n});\r\n\r\nexport const fetchColletionsSuccess = (collections) => ({\r\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n\tpayload: collections,\r\n});\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n\treturn (dispatch) => {\r\n\t\tconst collectionRef = firestore.collection(\"collections\");\r\n\t\tdispatch(fetchCollectionsStart());\r\n\t\tcollectionRef\r\n\t\t\t.get()\r\n\t\t\t.then((snapshot) => {\r\n\t\t\t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n\t\t\t\tdispatch(fetchColletionsSuccess(collectionsMap));\r\n\t\t\t})\r\n\t\t\t.catch((error) => dispatch(fetchCollectionsFailure(error.message)));\r\n\r\n\t\t/*\r\n\t\t//Observer Pattern\r\n\t\tthis.unsubscribeFromSnapshot = collectionRef.onSnapshot(\r\n\t\t\tasync (snapshot) => {\r\n\t\t\t\tconst CollectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n\t\t\t\tupdateCollections(CollectionsMap);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t);\r\n\t\t*/\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}